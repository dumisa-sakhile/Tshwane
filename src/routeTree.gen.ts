/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as PricingRouteImport } from './routes/pricing'
import { Route as DashboardRouteRouteImport } from './routes/dashboard/route'
import { Route as IndexRouteImport } from './routes/index'
import { Route as DashboardIndexRouteImport } from './routes/dashboard/index'
import { Route as AuthIndexRouteImport } from './routes/auth/index'
import { Route as AuthVerifyRouteImport } from './routes/auth/verify'
import { Route as DashboardAdminRouteRouteImport } from './routes/dashboard/admin/route'
import { Route as DashboardAdminIndexRouteImport } from './routes/dashboard/admin/index'

const PricingRoute = PricingRouteImport.update({
  id: '/pricing',
  path: '/pricing',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardRouteRoute = DashboardRouteRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardIndexRoute = DashboardIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => DashboardRouteRoute,
} as any)
const AuthIndexRoute = AuthIndexRouteImport.update({
  id: '/auth/',
  path: '/auth/',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthVerifyRoute = AuthVerifyRouteImport.update({
  id: '/auth/verify',
  path: '/auth/verify',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardAdminRouteRoute = DashboardAdminRouteRouteImport.update({
  id: '/admin',
  path: '/admin',
  getParentRoute: () => DashboardRouteRoute,
} as any)
const DashboardAdminIndexRoute = DashboardAdminIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => DashboardAdminRouteRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRouteRouteWithChildren
  '/pricing': typeof PricingRoute
  '/dashboard/admin': typeof DashboardAdminRouteRouteWithChildren
  '/auth/verify': typeof AuthVerifyRoute
  '/auth': typeof AuthIndexRoute
  '/dashboard/': typeof DashboardIndexRoute
  '/dashboard/admin/': typeof DashboardAdminIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/pricing': typeof PricingRoute
  '/auth/verify': typeof AuthVerifyRoute
  '/auth': typeof AuthIndexRoute
  '/dashboard': typeof DashboardIndexRoute
  '/dashboard/admin': typeof DashboardAdminIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRouteRouteWithChildren
  '/pricing': typeof PricingRoute
  '/dashboard/admin': typeof DashboardAdminRouteRouteWithChildren
  '/auth/verify': typeof AuthVerifyRoute
  '/auth/': typeof AuthIndexRoute
  '/dashboard/': typeof DashboardIndexRoute
  '/dashboard/admin/': typeof DashboardAdminIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/dashboard'
    | '/pricing'
    | '/dashboard/admin'
    | '/auth/verify'
    | '/auth'
    | '/dashboard/'
    | '/dashboard/admin/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/pricing'
    | '/auth/verify'
    | '/auth'
    | '/dashboard'
    | '/dashboard/admin'
  id:
    | '__root__'
    | '/'
    | '/dashboard'
    | '/pricing'
    | '/dashboard/admin'
    | '/auth/verify'
    | '/auth/'
    | '/dashboard/'
    | '/dashboard/admin/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  DashboardRouteRoute: typeof DashboardRouteRouteWithChildren
  PricingRoute: typeof PricingRoute
  AuthVerifyRoute: typeof AuthVerifyRoute
  AuthIndexRoute: typeof AuthIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/pricing': {
      id: '/pricing'
      path: '/pricing'
      fullPath: '/pricing'
      preLoaderRoute: typeof PricingRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dashboard/': {
      id: '/dashboard/'
      path: '/'
      fullPath: '/dashboard/'
      preLoaderRoute: typeof DashboardIndexRouteImport
      parentRoute: typeof DashboardRouteRoute
    }
    '/auth/': {
      id: '/auth/'
      path: '/auth'
      fullPath: '/auth'
      preLoaderRoute: typeof AuthIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth/verify': {
      id: '/auth/verify'
      path: '/auth/verify'
      fullPath: '/auth/verify'
      preLoaderRoute: typeof AuthVerifyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dashboard/admin': {
      id: '/dashboard/admin'
      path: '/admin'
      fullPath: '/dashboard/admin'
      preLoaderRoute: typeof DashboardAdminRouteRouteImport
      parentRoute: typeof DashboardRouteRoute
    }
    '/dashboard/admin/': {
      id: '/dashboard/admin/'
      path: '/'
      fullPath: '/dashboard/admin/'
      preLoaderRoute: typeof DashboardAdminIndexRouteImport
      parentRoute: typeof DashboardAdminRouteRoute
    }
  }
}

interface DashboardAdminRouteRouteChildren {
  DashboardAdminIndexRoute: typeof DashboardAdminIndexRoute
}

const DashboardAdminRouteRouteChildren: DashboardAdminRouteRouteChildren = {
  DashboardAdminIndexRoute: DashboardAdminIndexRoute,
}

const DashboardAdminRouteRouteWithChildren =
  DashboardAdminRouteRoute._addFileChildren(DashboardAdminRouteRouteChildren)

interface DashboardRouteRouteChildren {
  DashboardAdminRouteRoute: typeof DashboardAdminRouteRouteWithChildren
  DashboardIndexRoute: typeof DashboardIndexRoute
}

const DashboardRouteRouteChildren: DashboardRouteRouteChildren = {
  DashboardAdminRouteRoute: DashboardAdminRouteRouteWithChildren,
  DashboardIndexRoute: DashboardIndexRoute,
}

const DashboardRouteRouteWithChildren = DashboardRouteRoute._addFileChildren(
  DashboardRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  DashboardRouteRoute: DashboardRouteRouteWithChildren,
  PricingRoute: PricingRoute,
  AuthVerifyRoute: AuthVerifyRoute,
  AuthIndexRoute: AuthIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
